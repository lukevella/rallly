datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

enum TimeFormat {
  hours12
  hours24

  @@map("time_format")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique() @db.Citext
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  comments  Comment[]
  polls     Poll[]
  watcher   Watcher[]
  events    Event[]

  @@map("users")
}

enum SubscriptionStatus {
  active
  paused
  deleted
  trialing
  past_due

  @@map("subscription_status")
}

model UserPaymentData {
  userId         String             @id @map("user_id")
  subscriptionId String             @map("subscription_id")
  planId         String             @map("plan_id")
  endDate        DateTime           @map("end_date")
  status         SubscriptionStatus
  updateUrl      String             @map("update_url")
  cancelUrl      String             @map("cancel_url")

  @@map("user_payment_data")
}

model UserPreferences {
  userId     String      @id @map("user_id")
  timeZone   String?     @map("time_zone")
  weekStart  Int?        @map("week_start")
  timeFormat TimeFormat? @map("time_format")
  createdAt  DateTime    @default(now()) @map("created_at")

  @@map("user_preferences")
}

model Poll {
  id               String        @id @unique @map("id")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  deadline         DateTime?
  title            String
  description      String?
  location         String?
  user             User?         @relation(fields: [userId], references: [id])
  userId           String        @map("user_id")
  votes            Vote[]
  timeZone         String?       @map("time_zone")
  options          Option[]
  participants     Participant[]
  watchers         Watcher[]
  demo             Boolean       @default(false)
  comments         Comment[]
  legacy           Boolean       @default(false) // @deprecated
  closed           Boolean       @default(false) // we use this to indicate whether a poll is paused
  deleted          Boolean       @default(false)
  deletedAt        DateTime?     @map("deleted_at")
  touchedAt        DateTime      @default(now()) @map("touched_at")
  participantUrlId String        @unique @map("participant_url_id")
  adminUrlId       String        @unique @map("admin_url_id")
  eventId          String?       @map("event_id")
  event            Event?

  @@index([userId], type: Hash)
  @@map("polls")
}

model Event {
  id        String   @id @default(cuid())
  pollId    String   @unique @map("poll_id")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  poll      Poll     @relation(fields: [pollId], references: [id])
  optionId  String   @map("option_id")
  title     String
  start     DateTime @db.Timestamp(0)
  duration  Int      @default(0) @map("duration_minutes")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([pollId], type: Hash)
  @@index([userId], type: Hash)
  @@map("events")
}

model Watcher {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  pollId    String   @map("poll_id")
  createdAt DateTime @default(now()) @map("created_at")
  poll      Poll     @relation(fields: [pollId], references: [id])

  @@index([userId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("watchers")
}

model Participant {
  id        String    @id @default(cuid())
  name      String
  email     String?
  userId    String?   @map("user_id")
  poll      Poll      @relation(fields: [pollId], references: [id])
  pollId    String    @map("poll_id")
  votes     Vote[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([pollId], type: Hash)
  @@map("participants")
}

model Option {
  id        String   @id @default(cuid())
  start     DateTime @db.Timestamp(0)
  duration  Int      @default(0) @map("duration_minutes")
  pollId    String   @map("poll_id")
  poll      Poll     @relation(fields: [pollId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@index([pollId], type: Hash)
  @@map("options")
}

enum VoteType {
  yes
  no
  ifNeedBe

  @@map("vote_type")
}

model Vote {
  id            String      @id @default(cuid())
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String      @map("participant_id")
  optionId      String      @map("option_id")
  poll          Poll        @relation(fields: [pollId], references: [id])
  pollId        String      @map("poll_id")
  type          VoteType    @default(yes)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime?   @updatedAt @map("updated_at")

  @@index([participantId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("votes")
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  poll       Poll      @relation(fields: [pollId], references: [id])
  pollId     String    @map("poll_id")
  authorName String    @map("author_name")
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@index([userId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("comments")
}
